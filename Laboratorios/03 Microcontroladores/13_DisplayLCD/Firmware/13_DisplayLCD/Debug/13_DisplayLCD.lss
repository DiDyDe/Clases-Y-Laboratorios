
13_DisplayLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000002be  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080011c  0080011c  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b0e  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000819  00000000  00000000  00000f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b9  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fb  00000000  00000000  00002102  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000022fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  9e:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_start>:

#define DATAPORT	PORTD

 void lcd_start()
 {
	CONTROLPORT &=~ (1<<ENABLE); 
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	8f ec       	ldi	r24, 0xCF	; 207
  ae:	97 e0       	ldi	r25, 0x07	; 7
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_start+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_start+0x10>
  b6:	00 00       	nop
	_delay_ms(1);
	CONTROLPORT |=  (1<<ENABLE);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	85 b9       	out	0x05, r24	; 5
  be:	08 95       	ret

000000c0 <lcd_write>:
 }

 void lcd_write(uint8_t type, uint8_t inst_data)
 {
  c0:	cf 93       	push	r28
  c2:	c6 2f       	mov	r28, r22
	if (type)
  c4:	88 23       	and	r24, r24
  c6:	21 f0       	breq	.+8      	; 0xd0 <lcd_write+0x10>
		// DR - DATA REGISTER
		CONTROLPORT |=  (1<<RS);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_write+0x16>
	else
		// IR - INSTRUCTION REGISTER
		CONTROLPORT &=~ (1<<RS);
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	85 b9       	out	0x05, r24	; 5

	DATAPORT = (PIND & 0x0F) | ( (inst_data)	& 0xF0);
  d6:	89 b1       	in	r24, 0x09	; 9
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	9c 2f       	mov	r25, r28
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	89 2b       	or	r24, r25
  e0:	8b b9       	out	0x0b, r24	; 11
	lcd_start();
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_start>
	DATAPORT = (PIND & 0x0F) | ( (inst_data<<4) & 0xF0);
  e6:	89 b1       	in	r24, 0x09	; 9
  e8:	90 e1       	ldi	r25, 0x10	; 16
  ea:	c9 9f       	mul	r28, r25
  ec:	b0 01       	movw	r22, r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	68 2b       	or	r22, r24
  f4:	6b b9       	out	0x0b, r22	; 11
	lcd_start();
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_start>
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_write+0x3e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_write+0x44>
 104:	00 00       	nop
	_delay_ms(2);
 }
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <lcd_init>:

 void lcd_init()
 {
	DDRB  |=  (1<<DDB0) | (1<<DDB1);	
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	84 b9       	out	0x04, r24	; 4
	DDRD  |=  (1<<DDB4) | (1<<DDB5) | (1<<DDB6) | (1<<DDB7);
 110:	8a b1       	in	r24, 0x0a	; 10
 112:	80 6f       	ori	r24, 0xF0	; 240
 114:	8a b9       	out	0x0a, r24	; 10
	
	CONTROLPORT &=~ ((1<<ENABLE) | (1<<ENABLE));
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	85 b9       	out	0x05, r24	; 5
	
	DATAPORT  = (PIND & 0x0F) | 0x30;
 11c:	89 b1       	in	r24, 0x09	; 9
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	80 63       	ori	r24, 0x30	; 48
 122:	8b b9       	out	0x0b, r24	; 11

	lcd_start();
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_start>

	DATAPORT = (PIND & 0x0F) | 0x20;
 128:	89 b1       	in	r24, 0x09	; 9
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	8b b9       	out	0x0b, r24	; 11
	
	lcd_start();
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_start>

	lcd_write(LCD_INST, 0x2C);
 134:	6c e2       	ldi	r22, 0x2C	; 44
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_write>
	lcd_write(LCD_INST, 0x08);
 13c:	68 e0       	ldi	r22, 0x08	; 8
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_write>
	lcd_write(LCD_INST, 0x01);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_write>
	lcd_write(LCD_INST, 0x06);
 14c:	66 e0       	ldi	r22, 0x06	; 6
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_write>
	lcd_write(LCD_INST, 0x0C);
 154:	6c e0       	ldi	r22, 0x0C	; 12
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_write>
 15c:	08 95       	ret

0000015e <lcd_print>:
 }

void lcd_print(char *s)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
	while(*s)
 164:	04 c0       	rjmp	.+8      	; 0x16e <lcd_print+0x10>
	{
		lcd_write(LCD_DATA, *s);
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_write>
		s++;
 16c:	21 96       	adiw	r28, 0x01	; 1
	lcd_write(LCD_INST, 0x0C);
 }

void lcd_print(char *s)
{
	while(*s)
 16e:	68 81       	ld	r22, Y
 170:	61 11       	cpse	r22, r1
 172:	f9 cf       	rjmp	.-14     	; 0x166 <lcd_print+0x8>
	{
		lcd_write(LCD_DATA, *s);
		s++;
	}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <main>:

float cast = 0.0;

int main(void)
{
    lcd_init();
 17a:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_init>
	int casting = (int) cast;
 17e:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <__data_end>
 182:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <__data_end+0x1>
 186:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end+0x2>
 18a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x3>
 18e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__fixsfsi>
 192:	c6 2f       	mov	r28, r22
	
    while (1)
	{
		lcd_write(casting, CLEAR);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	8c 2f       	mov	r24, r28
 198:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_write>
		lcd_print("SSSSSSSSSSSHOLA");
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_print>
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	83 ed       	ldi	r24, 0xD3	; 211
 1a8:	90 e3       	ldi	r25, 0x30	; 48
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x30>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x3a>
 1b4:	00 00       	nop
		_delay_ms(2000);
		
		lcd_write(LCD_INST, CLEAR);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_write>
		lcd_print("84 PPM");
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_print>
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	83 ed       	ldi	r24, 0xD3	; 211
 1ca:	90 e3       	ldi	r25, 0x30	; 48
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x52>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x5c>
 1d6:	00 00       	nop
		_delay_ms(2000);
		
		lcd_write(LCD_INST, LINEA2);
 1d8:	60 ec       	ldi	r22, 0xC0	; 192
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_write>
		lcd_print("CIAO");
 1e0:	87 e1       	ldi	r24, 0x17	; 23
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_print>
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	83 ed       	ldi	r24, 0xD3	; 211
 1ec:	90 e3       	ldi	r25, 0x30	; 48
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x74>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x7e>
 1f8:	00 00       	nop
 1fa:	cc cf       	rjmp	.-104    	; 0x194 <main+0x1a>

000001fc <__fixsfsi>:
 1fc:	0e 94 05 01 	call	0x20a	; 0x20a <__fixunssfsi>
 200:	68 94       	set
 202:	b1 11       	cpse	r27, r1
 204:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__fp_szero>
 208:	08 95       	ret

0000020a <__fixunssfsi>:
 20a:	0e 94 3c 01 	call	0x278	; 0x278 <__fp_splitA>
 20e:	88 f0       	brcs	.+34     	; 0x232 <__fixunssfsi+0x28>
 210:	9f 57       	subi	r25, 0x7F	; 127
 212:	98 f0       	brcs	.+38     	; 0x23a <__fixunssfsi+0x30>
 214:	b9 2f       	mov	r27, r25
 216:	99 27       	eor	r25, r25
 218:	b7 51       	subi	r27, 0x17	; 23
 21a:	b0 f0       	brcs	.+44     	; 0x248 <__fixunssfsi+0x3e>
 21c:	e1 f0       	breq	.+56     	; 0x256 <__fixunssfsi+0x4c>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	88 1f       	adc	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	1a f0       	brmi	.+6      	; 0x22e <__fixunssfsi+0x24>
 228:	ba 95       	dec	r27
 22a:	c9 f7       	brne	.-14     	; 0x21e <__fixunssfsi+0x14>
 22c:	14 c0       	rjmp	.+40     	; 0x256 <__fixunssfsi+0x4c>
 22e:	b1 30       	cpi	r27, 0x01	; 1
 230:	91 f0       	breq	.+36     	; 0x256 <__fixunssfsi+0x4c>
 232:	0e 94 56 01 	call	0x2ac	; 0x2ac <__fp_zero>
 236:	b1 e0       	ldi	r27, 0x01	; 1
 238:	08 95       	ret
 23a:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__fp_zero>
 23e:	67 2f       	mov	r22, r23
 240:	78 2f       	mov	r23, r24
 242:	88 27       	eor	r24, r24
 244:	b8 5f       	subi	r27, 0xF8	; 248
 246:	39 f0       	breq	.+14     	; 0x256 <__fixunssfsi+0x4c>
 248:	b9 3f       	cpi	r27, 0xF9	; 249
 24a:	cc f3       	brlt	.-14     	; 0x23e <__fixunssfsi+0x34>
 24c:	86 95       	lsr	r24
 24e:	77 95       	ror	r23
 250:	67 95       	ror	r22
 252:	b3 95       	inc	r27
 254:	d9 f7       	brne	.-10     	; 0x24c <__fixunssfsi+0x42>
 256:	3e f4       	brtc	.+14     	; 0x266 <__fixunssfsi+0x5c>
 258:	90 95       	com	r25
 25a:	80 95       	com	r24
 25c:	70 95       	com	r23
 25e:	61 95       	neg	r22
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	8f 4f       	sbci	r24, 0xFF	; 255
 264:	9f 4f       	sbci	r25, 0xFF	; 255
 266:	08 95       	ret

00000268 <__fp_split3>:
 268:	57 fd       	sbrc	r21, 7
 26a:	90 58       	subi	r25, 0x80	; 128
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	59 f0       	breq	.+22     	; 0x288 <__fp_splitA+0x10>
 272:	5f 3f       	cpi	r21, 0xFF	; 255
 274:	71 f0       	breq	.+28     	; 0x292 <__fp_splitA+0x1a>
 276:	47 95       	ror	r20

00000278 <__fp_splitA>:
 278:	88 0f       	add	r24, r24
 27a:	97 fb       	bst	r25, 7
 27c:	99 1f       	adc	r25, r25
 27e:	61 f0       	breq	.+24     	; 0x298 <__fp_splitA+0x20>
 280:	9f 3f       	cpi	r25, 0xFF	; 255
 282:	79 f0       	breq	.+30     	; 0x2a2 <__fp_splitA+0x2a>
 284:	87 95       	ror	r24
 286:	08 95       	ret
 288:	12 16       	cp	r1, r18
 28a:	13 06       	cpc	r1, r19
 28c:	14 06       	cpc	r1, r20
 28e:	55 1f       	adc	r21, r21
 290:	f2 cf       	rjmp	.-28     	; 0x276 <__fp_split3+0xe>
 292:	46 95       	lsr	r20
 294:	f1 df       	rcall	.-30     	; 0x278 <__fp_splitA>
 296:	08 c0       	rjmp	.+16     	; 0x2a8 <__fp_splitA+0x30>
 298:	16 16       	cp	r1, r22
 29a:	17 06       	cpc	r1, r23
 29c:	18 06       	cpc	r1, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	f1 cf       	rjmp	.-30     	; 0x284 <__fp_splitA+0xc>
 2a2:	86 95       	lsr	r24
 2a4:	71 05       	cpc	r23, r1
 2a6:	61 05       	cpc	r22, r1
 2a8:	08 94       	sec
 2aa:	08 95       	ret

000002ac <__fp_zero>:
 2ac:	e8 94       	clt

000002ae <__fp_szero>:
 2ae:	bb 27       	eor	r27, r27
 2b0:	66 27       	eor	r22, r22
 2b2:	77 27       	eor	r23, r23
 2b4:	cb 01       	movw	r24, r22
 2b6:	97 f9       	bld	r25, 7
 2b8:	08 95       	ret

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
